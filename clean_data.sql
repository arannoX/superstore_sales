-- Selecting the Superstore Sales database
USE SUPERSTORE_SALES_DB;

/* 
Exploring and cleaning the dataset
*/

-- Checking the total number of rows in the SALES_DATA table
SELECT COUNT(*) AS TOTAL_ROW FROM SALES_DATA; -- Expected: 9426 rows, Found: 9426 rows

SELECT * FROM SALES_DATA;

-- Retrieving column names and data types for validation
SELECT COLUMN_NAME, DATA_TYPE 
FROM INFORMATION_SCHEMA.COLUMNS 
WHERE TABLE_NAME = 'SALES_DATA';

-- Disabling safe update mode to allow updates without a WHERE clause
SET SQL_SAFE_UPDATES = 0;

-- Converting Excel serial date format to MySQL DATE format
UPDATE SALES_DATA  
SET ORDER_DATE = DATE_ADD('1899-12-30', INTERVAL CAST(ORDER_DATE AS UNSIGNED) DAY),  
    SHIP_DATE = DATE_ADD('1899-12-30', INTERVAL CAST(SHIP_DATE AS UNSIGNED) DAY);

-- Modifying ORDER_DATE and SHIP_DATE columns to enforce DATE data type
ALTER TABLE SALES_DATA
MODIFY ORDER_DATE DATE,  
MODIFY SHIP_DATE DATE;

-- Checking for duplicate ROW_ID in the SALES_DATA table
SELECT ROW_ID, COUNT(*) AS DUPLICATE_COUNT
FROM SALES_DATA
GROUP BY ROW_ID
HAVING COUNT(*) > 1
ORDER BY DUPLICATE_COUNT DESC; -- No duplicates found

-- Identifying missing (NULL) values across all columns
SELECT 
    (SELECT COUNT(*) FROM SALES_DATA WHERE ROW_ID IS NULL) AS MISSING_ROW_ID,
    (SELECT COUNT(*) FROM SALES_DATA WHERE ORDER_PRIORITY IS NULL) AS MISSING_ORDER_PRIORITY,
    (SELECT COUNT(*) FROM SALES_DATA WHERE DISCOUNT IS NULL) AS MISSING_DISCOUNT,
    (SELECT COUNT(*) FROM SALES_DATA WHERE UNIT_PRICE IS NULL) AS MISSING_UNIT_PRICE,
    (SELECT COUNT(*) FROM SALES_DATA WHERE SHIPPING_COST IS NULL) AS MISSING_SHIPPING_COST,
    (SELECT COUNT(*) FROM SALES_DATA WHERE CUSTOMER_ID IS NULL) AS MISSING_CUSTOMER_ID,
    (SELECT COUNT(*) FROM SALES_DATA WHERE CUSTOMER_NAME IS NULL) AS MISSING_CUSTOMER_NAME,
    (SELECT COUNT(*) FROM SALES_DATA WHERE SHIP_MODE IS NULL) AS MISSING_SHIP_MODE,
    (SELECT COUNT(*) FROM SALES_DATA WHERE CUSTOMER_SEGMENT IS NULL) AS MISSING_CUSTOMER_SEGMENT,
    (SELECT COUNT(*) FROM SALES_DATA WHERE PRODUCT_CATEGORY IS NULL) AS MISSING_PRODUCT_CATEGORY,
    (SELECT COUNT(*) FROM SALES_DATA WHERE PRODUCT_SUB_CATEGORY IS NULL) AS MISSING_PRODUCT_SUB_CATEGORY,
    (SELECT COUNT(*) FROM SALES_DATA WHERE PRODUCT_CONTAINER IS NULL) AS MISSING_PRODUCT_CONTAINER,
    (SELECT COUNT(*) FROM SALES_DATA WHERE PRODUCT_NAME IS NULL) AS MISSING_PRODUCT_NAME,
    (SELECT COUNT(*) FROM SALES_DATA WHERE PRODUCT_BASE_MARGIN IS NULL) AS MISSING_PRODUCT_BASE_MARGIN, -- Missing values found for PRODUCT_BASE_MARGIN
    (SELECT COUNT(*) FROM SALES_DATA WHERE REGION IS NULL) AS MISSING_REGION,
    (SELECT COUNT(*) FROM SALES_DATA WHERE MANAGER IS NULL) AS MISSING_MANAGER,
    (SELECT COUNT(*) FROM SALES_DATA WHERE STATE_OR_PROVINCE IS NULL) AS MISSING_STATE_OR_PROVINCE,
    (SELECT COUNT(*) FROM SALES_DATA WHERE CITY IS NULL) AS MISSING_CITY,
    (SELECT COUNT(*) FROM SALES_DATA WHERE POSTAL_CODE IS NULL) AS MISSING_POSTAL_CODE,
    (SELECT COUNT(*) FROM SALES_DATA WHERE ORDER_DATE IS NULL) AS MISSING_ORDER_DATE,
    (SELECT COUNT(*) FROM SALES_DATA WHERE SHIP_DATE IS NULL) AS MISSING_SHIP_DATE,
    (SELECT COUNT(*) FROM SALES_DATA WHERE PROFIT IS NULL) AS MISSING_PROFIT,
    (SELECT COUNT(*) FROM SALES_DATA WHERE QUANTITY_ORDERED_NEW IS NULL) AS MISSING_QUANTITY_ORDERED_NEW,
    (SELECT COUNT(*) FROM SALES_DATA WHERE SALES IS NULL) AS MISSING_SALES,
    (SELECT COUNT(*) FROM SALES_DATA WHERE ORDER_ID IS NULL) AS MISSING_ORDER_ID,
    (SELECT COUNT(*) FROM SALES_DATA WHERE RETURN_STATUS IS NULL) AS MISSING_RETURN_STATUS;

-- Imputing NULL values in PRODUCT_BASE_MARGIN using the average per PRODUCT_SUB_CATEGORY
UPDATE SALES_DATA S
JOIN (
    SELECT PRODUCT_SUB_CATEGORY, AVG(PRODUCT_BASE_MARGIN) AS AVG_MARGIN
    FROM SALES_DATA 
    WHERE PRODUCT_BASE_MARGIN IS NOT NULL
    GROUP BY PRODUCT_SUB_CATEGORY
) A 
ON S.PRODUCT_SUB_CATEGORY = A.PRODUCT_SUB_CATEGORY
SET S.PRODUCT_BASE_MARGIN = A.AVG_MARGIN
WHERE S.PRODUCT_BASE_MARGIN IS NULL;

-- Standardizing numerical values by rounding them to two decimal places
UPDATE SALES_DATA  
SET  
    DISCOUNT = ROUND(DISCOUNT, 2),  
    UNIT_PRICE = ROUND(UNIT_PRICE, 2),  
    SHIPPING_COST = ROUND(SHIPPING_COST, 2),  
    PRODUCT_BASE_MARGIN = ROUND(PRODUCT_BASE_MARGIN, 2),  
    PROFIT = ROUND(PROFIT, 2),  
    SALES = ROUND(SALES, 2);

-- Checking Distinct Categories
SELECT DISTINCT ORDER_PRIORITY 
FROM SALES_DATA; -- "Critical" found twice 

/* Note: Generally, the same category can appear multiple times as distinct 
   due to differences in letter case or leading and trailing spaces. 
   Therefore, we are converting all text-based categorical values to lowercase 
   and removing leading and trailing spaces from all text-based categorical values. */

-- Converting all text-based categorical values to lowercase
UPDATE SALES_DATA
SET 
    ORDER_PRIORITY = LOWER(ORDER_PRIORITY),
    SHIP_MODE = LOWER(SHIP_MODE),
    CUSTOMER_SEGMENT = LOWER(CUSTOMER_SEGMENT),
    PRODUCT_CATEGORY = LOWER(PRODUCT_CATEGORY),
    PRODUCT_SUB_CATEGORY = LOWER(PRODUCT_SUB_CATEGORY),
    PRODUCT_CONTAINER = LOWER(PRODUCT_CONTAINER),
    PRODUCT_NAME = LOWER(PRODUCT_NAME),
    REGION = LOWER(REGION),
    MANAGER = LOWER(MANAGER),
    STATE_OR_PROVINCE = LOWER(STATE_OR_PROVINCE),
    CITY = LOWER(CITY),
    RETURN_STATUS = LOWER(RETURN_STATUS);

-- Removing leading and trailing spaces from all text-based categorical values
UPDATE SALES_DATA
SET 
    ORDER_PRIORITY = TRIM(ORDER_PRIORITY),
    SHIP_MODE = TRIM(SHIP_MODE),
    CUSTOMER_SEGMENT = TRIM(CUSTOMER_SEGMENT),
    PRODUCT_CATEGORY = TRIM(PRODUCT_CATEGORY),
    PRODUCT_SUB_CATEGORY = TRIM(PRODUCT_SUB_CATEGORY),
    PRODUCT_CONTAINER = TRIM(PRODUCT_CONTAINER),
    PRODUCT_NAME = TRIM(PRODUCT_NAME),
    REGION = TRIM(REGION),
    MANAGER = TRIM(MANAGER),
    STATE_OR_PROVINCE = TRIM(STATE_OR_PROVINCE),
    CITY = TRIM(CITY),
    RETURN_STATUS = TRIM(RETURN_STATUS);
    
/* 
Negative values for quantity are typically invalid in sales data. 
Therefore, the query below helps identify potential data entry errors, 
inconsistencies, or outliers that need to be addressed. 
If any negative values are found, they should be replaced.
*/

SELECT QUANTITY_ORDERED_NEW 
FROM SALES_DATA
WHERE QUANTITY_ORDERED_NEW < 0; -- No values found less than 0
